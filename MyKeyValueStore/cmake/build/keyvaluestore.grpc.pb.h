// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: keyvaluestore.proto
#ifndef GRPC_keyvaluestore_2eproto__INCLUDED
#define GRPC_keyvaluestore_2eproto__INCLUDED

#include "keyvaluestore.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace keyvaluestore {

// A simple key-value storage service
class storeManager final {
 public:
  static constexpr char const* service_full_name() {
    return "keyvaluestore.storeManager";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Provides a value for each key request
    virtual ::grpc::Status GET(::grpc::ClientContext* context, const ::keyvaluestore::requestKey& request, ::keyvaluestore::responseValue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::keyvaluestore::responseValue>> AsyncGET(::grpc::ClientContext* context, const ::keyvaluestore::requestKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::keyvaluestore::responseValue>>(AsyncGETRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::keyvaluestore::responseValue>> PrepareAsyncGET(::grpc::ClientContext* context, const ::keyvaluestore::requestKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::keyvaluestore::responseValue>>(PrepareAsyncGETRaw(context, request, cq));
    }
    virtual ::grpc::Status DEL(::grpc::ClientContext* context, const ::keyvaluestore::requestKey& request, ::keyvaluestore::responseValue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::keyvaluestore::responseValue>> AsyncDEL(::grpc::ClientContext* context, const ::keyvaluestore::requestKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::keyvaluestore::responseValue>>(AsyncDELRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::keyvaluestore::responseValue>> PrepareAsyncDEL(::grpc::ClientContext* context, const ::keyvaluestore::requestKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::keyvaluestore::responseValue>>(PrepareAsyncDELRaw(context, request, cq));
    }
    virtual ::grpc::Status PUT(::grpc::ClientContext* context, const ::keyvaluestore::requestKeyValue& request, ::keyvaluestore::responseStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::keyvaluestore::responseStatus>> AsyncPUT(::grpc::ClientContext* context, const ::keyvaluestore::requestKeyValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::keyvaluestore::responseStatus>>(AsyncPUTRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::keyvaluestore::responseStatus>> PrepareAsyncPUT(::grpc::ClientContext* context, const ::keyvaluestore::requestKeyValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::keyvaluestore::responseStatus>>(PrepareAsyncPUTRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Provides a value for each key request
      virtual void GET(::grpc::ClientContext* context, const ::keyvaluestore::requestKey* request, ::keyvaluestore::responseValue* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GET(::grpc::ClientContext* context, const ::keyvaluestore::requestKey* request, ::keyvaluestore::responseValue* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DEL(::grpc::ClientContext* context, const ::keyvaluestore::requestKey* request, ::keyvaluestore::responseValue* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DEL(::grpc::ClientContext* context, const ::keyvaluestore::requestKey* request, ::keyvaluestore::responseValue* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PUT(::grpc::ClientContext* context, const ::keyvaluestore::requestKeyValue* request, ::keyvaluestore::responseStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PUT(::grpc::ClientContext* context, const ::keyvaluestore::requestKeyValue* request, ::keyvaluestore::responseStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::keyvaluestore::responseValue>* AsyncGETRaw(::grpc::ClientContext* context, const ::keyvaluestore::requestKey& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::keyvaluestore::responseValue>* PrepareAsyncGETRaw(::grpc::ClientContext* context, const ::keyvaluestore::requestKey& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::keyvaluestore::responseValue>* AsyncDELRaw(::grpc::ClientContext* context, const ::keyvaluestore::requestKey& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::keyvaluestore::responseValue>* PrepareAsyncDELRaw(::grpc::ClientContext* context, const ::keyvaluestore::requestKey& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::keyvaluestore::responseStatus>* AsyncPUTRaw(::grpc::ClientContext* context, const ::keyvaluestore::requestKeyValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::keyvaluestore::responseStatus>* PrepareAsyncPUTRaw(::grpc::ClientContext* context, const ::keyvaluestore::requestKeyValue& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GET(::grpc::ClientContext* context, const ::keyvaluestore::requestKey& request, ::keyvaluestore::responseValue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::keyvaluestore::responseValue>> AsyncGET(::grpc::ClientContext* context, const ::keyvaluestore::requestKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::keyvaluestore::responseValue>>(AsyncGETRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::keyvaluestore::responseValue>> PrepareAsyncGET(::grpc::ClientContext* context, const ::keyvaluestore::requestKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::keyvaluestore::responseValue>>(PrepareAsyncGETRaw(context, request, cq));
    }
    ::grpc::Status DEL(::grpc::ClientContext* context, const ::keyvaluestore::requestKey& request, ::keyvaluestore::responseValue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::keyvaluestore::responseValue>> AsyncDEL(::grpc::ClientContext* context, const ::keyvaluestore::requestKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::keyvaluestore::responseValue>>(AsyncDELRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::keyvaluestore::responseValue>> PrepareAsyncDEL(::grpc::ClientContext* context, const ::keyvaluestore::requestKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::keyvaluestore::responseValue>>(PrepareAsyncDELRaw(context, request, cq));
    }
    ::grpc::Status PUT(::grpc::ClientContext* context, const ::keyvaluestore::requestKeyValue& request, ::keyvaluestore::responseStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::keyvaluestore::responseStatus>> AsyncPUT(::grpc::ClientContext* context, const ::keyvaluestore::requestKeyValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::keyvaluestore::responseStatus>>(AsyncPUTRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::keyvaluestore::responseStatus>> PrepareAsyncPUT(::grpc::ClientContext* context, const ::keyvaluestore::requestKeyValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::keyvaluestore::responseStatus>>(PrepareAsyncPUTRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GET(::grpc::ClientContext* context, const ::keyvaluestore::requestKey* request, ::keyvaluestore::responseValue* response, std::function<void(::grpc::Status)>) override;
      void GET(::grpc::ClientContext* context, const ::keyvaluestore::requestKey* request, ::keyvaluestore::responseValue* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DEL(::grpc::ClientContext* context, const ::keyvaluestore::requestKey* request, ::keyvaluestore::responseValue* response, std::function<void(::grpc::Status)>) override;
      void DEL(::grpc::ClientContext* context, const ::keyvaluestore::requestKey* request, ::keyvaluestore::responseValue* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PUT(::grpc::ClientContext* context, const ::keyvaluestore::requestKeyValue* request, ::keyvaluestore::responseStatus* response, std::function<void(::grpc::Status)>) override;
      void PUT(::grpc::ClientContext* context, const ::keyvaluestore::requestKeyValue* request, ::keyvaluestore::responseStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::keyvaluestore::responseValue>* AsyncGETRaw(::grpc::ClientContext* context, const ::keyvaluestore::requestKey& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::keyvaluestore::responseValue>* PrepareAsyncGETRaw(::grpc::ClientContext* context, const ::keyvaluestore::requestKey& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::keyvaluestore::responseValue>* AsyncDELRaw(::grpc::ClientContext* context, const ::keyvaluestore::requestKey& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::keyvaluestore::responseValue>* PrepareAsyncDELRaw(::grpc::ClientContext* context, const ::keyvaluestore::requestKey& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::keyvaluestore::responseStatus>* AsyncPUTRaw(::grpc::ClientContext* context, const ::keyvaluestore::requestKeyValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::keyvaluestore::responseStatus>* PrepareAsyncPUTRaw(::grpc::ClientContext* context, const ::keyvaluestore::requestKeyValue& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GET_;
    const ::grpc::internal::RpcMethod rpcmethod_DEL_;
    const ::grpc::internal::RpcMethod rpcmethod_PUT_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Provides a value for each key request
    virtual ::grpc::Status GET(::grpc::ServerContext* context, const ::keyvaluestore::requestKey* request, ::keyvaluestore::responseValue* response);
    virtual ::grpc::Status DEL(::grpc::ServerContext* context, const ::keyvaluestore::requestKey* request, ::keyvaluestore::responseValue* response);
    virtual ::grpc::Status PUT(::grpc::ServerContext* context, const ::keyvaluestore::requestKeyValue* request, ::keyvaluestore::responseStatus* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GET : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GET() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GET() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GET(::grpc::ServerContext* /*context*/, const ::keyvaluestore::requestKey* /*request*/, ::keyvaluestore::responseValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGET(::grpc::ServerContext* context, ::keyvaluestore::requestKey* request, ::grpc::ServerAsyncResponseWriter< ::keyvaluestore::responseValue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DEL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DEL() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DEL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DEL(::grpc::ServerContext* /*context*/, const ::keyvaluestore::requestKey* /*request*/, ::keyvaluestore::responseValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDEL(::grpc::ServerContext* context, ::keyvaluestore::requestKey* request, ::grpc::ServerAsyncResponseWriter< ::keyvaluestore::responseValue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PUT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PUT() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PUT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PUT(::grpc::ServerContext* /*context*/, const ::keyvaluestore::requestKeyValue* /*request*/, ::keyvaluestore::responseStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPUT(::grpc::ServerContext* context, ::keyvaluestore::requestKeyValue* request, ::grpc::ServerAsyncResponseWriter< ::keyvaluestore::responseStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GET<WithAsyncMethod_DEL<WithAsyncMethod_PUT<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GET : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GET() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::keyvaluestore::requestKey, ::keyvaluestore::responseValue>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::keyvaluestore::requestKey* request, ::keyvaluestore::responseValue* response) { return this->GET(context, request, response); }));}
    void SetMessageAllocatorFor_GET(
        ::grpc::MessageAllocator< ::keyvaluestore::requestKey, ::keyvaluestore::responseValue>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::keyvaluestore::requestKey, ::keyvaluestore::responseValue>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GET() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GET(::grpc::ServerContext* /*context*/, const ::keyvaluestore::requestKey* /*request*/, ::keyvaluestore::responseValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GET(
      ::grpc::CallbackServerContext* /*context*/, const ::keyvaluestore::requestKey* /*request*/, ::keyvaluestore::responseValue* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DEL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DEL() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::keyvaluestore::requestKey, ::keyvaluestore::responseValue>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::keyvaluestore::requestKey* request, ::keyvaluestore::responseValue* response) { return this->DEL(context, request, response); }));}
    void SetMessageAllocatorFor_DEL(
        ::grpc::MessageAllocator< ::keyvaluestore::requestKey, ::keyvaluestore::responseValue>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::keyvaluestore::requestKey, ::keyvaluestore::responseValue>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DEL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DEL(::grpc::ServerContext* /*context*/, const ::keyvaluestore::requestKey* /*request*/, ::keyvaluestore::responseValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DEL(
      ::grpc::CallbackServerContext* /*context*/, const ::keyvaluestore::requestKey* /*request*/, ::keyvaluestore::responseValue* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PUT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PUT() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::keyvaluestore::requestKeyValue, ::keyvaluestore::responseStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::keyvaluestore::requestKeyValue* request, ::keyvaluestore::responseStatus* response) { return this->PUT(context, request, response); }));}
    void SetMessageAllocatorFor_PUT(
        ::grpc::MessageAllocator< ::keyvaluestore::requestKeyValue, ::keyvaluestore::responseStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::keyvaluestore::requestKeyValue, ::keyvaluestore::responseStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PUT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PUT(::grpc::ServerContext* /*context*/, const ::keyvaluestore::requestKeyValue* /*request*/, ::keyvaluestore::responseStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PUT(
      ::grpc::CallbackServerContext* /*context*/, const ::keyvaluestore::requestKeyValue* /*request*/, ::keyvaluestore::responseStatus* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GET<WithCallbackMethod_DEL<WithCallbackMethod_PUT<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GET : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GET() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GET() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GET(::grpc::ServerContext* /*context*/, const ::keyvaluestore::requestKey* /*request*/, ::keyvaluestore::responseValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DEL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DEL() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DEL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DEL(::grpc::ServerContext* /*context*/, const ::keyvaluestore::requestKey* /*request*/, ::keyvaluestore::responseValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PUT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PUT() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PUT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PUT(::grpc::ServerContext* /*context*/, const ::keyvaluestore::requestKeyValue* /*request*/, ::keyvaluestore::responseStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GET : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GET() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GET() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GET(::grpc::ServerContext* /*context*/, const ::keyvaluestore::requestKey* /*request*/, ::keyvaluestore::responseValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGET(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DEL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DEL() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DEL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DEL(::grpc::ServerContext* /*context*/, const ::keyvaluestore::requestKey* /*request*/, ::keyvaluestore::responseValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDEL(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PUT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PUT() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PUT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PUT(::grpc::ServerContext* /*context*/, const ::keyvaluestore::requestKeyValue* /*request*/, ::keyvaluestore::responseStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPUT(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GET : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GET() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GET(context, request, response); }));
    }
    ~WithRawCallbackMethod_GET() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GET(::grpc::ServerContext* /*context*/, const ::keyvaluestore::requestKey* /*request*/, ::keyvaluestore::responseValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GET(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DEL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DEL() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DEL(context, request, response); }));
    }
    ~WithRawCallbackMethod_DEL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DEL(::grpc::ServerContext* /*context*/, const ::keyvaluestore::requestKey* /*request*/, ::keyvaluestore::responseValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DEL(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PUT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PUT() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PUT(context, request, response); }));
    }
    ~WithRawCallbackMethod_PUT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PUT(::grpc::ServerContext* /*context*/, const ::keyvaluestore::requestKeyValue* /*request*/, ::keyvaluestore::responseStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PUT(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GET : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GET() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::keyvaluestore::requestKey, ::keyvaluestore::responseValue>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::keyvaluestore::requestKey, ::keyvaluestore::responseValue>* streamer) {
                       return this->StreamedGET(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GET() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GET(::grpc::ServerContext* /*context*/, const ::keyvaluestore::requestKey* /*request*/, ::keyvaluestore::responseValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGET(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::keyvaluestore::requestKey,::keyvaluestore::responseValue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DEL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DEL() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::keyvaluestore::requestKey, ::keyvaluestore::responseValue>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::keyvaluestore::requestKey, ::keyvaluestore::responseValue>* streamer) {
                       return this->StreamedDEL(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DEL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DEL(::grpc::ServerContext* /*context*/, const ::keyvaluestore::requestKey* /*request*/, ::keyvaluestore::responseValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDEL(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::keyvaluestore::requestKey,::keyvaluestore::responseValue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PUT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PUT() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::keyvaluestore::requestKeyValue, ::keyvaluestore::responseStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::keyvaluestore::requestKeyValue, ::keyvaluestore::responseStatus>* streamer) {
                       return this->StreamedPUT(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PUT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PUT(::grpc::ServerContext* /*context*/, const ::keyvaluestore::requestKeyValue* /*request*/, ::keyvaluestore::responseStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPUT(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::keyvaluestore::requestKeyValue,::keyvaluestore::responseStatus>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GET<WithStreamedUnaryMethod_DEL<WithStreamedUnaryMethod_PUT<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GET<WithStreamedUnaryMethod_DEL<WithStreamedUnaryMethod_PUT<Service > > > StreamedService;
};

}  // namespace keyvaluestore


#endif  // GRPC_keyvaluestore_2eproto__INCLUDED
