// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: keyvaluestore.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_keyvaluestore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_keyvaluestore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_keyvaluestore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_keyvaluestore_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_keyvaluestore_2eproto;
namespace keyvaluestore {
class requestKey;
struct requestKeyDefaultTypeInternal;
extern requestKeyDefaultTypeInternal _requestKey_default_instance_;
class requestKeyValue;
struct requestKeyValueDefaultTypeInternal;
extern requestKeyValueDefaultTypeInternal _requestKeyValue_default_instance_;
class responseStatus;
struct responseStatusDefaultTypeInternal;
extern responseStatusDefaultTypeInternal _responseStatus_default_instance_;
class responseValue;
struct responseValueDefaultTypeInternal;
extern responseValueDefaultTypeInternal _responseValue_default_instance_;
}  // namespace keyvaluestore
PROTOBUF_NAMESPACE_OPEN
template<> ::keyvaluestore::requestKey* Arena::CreateMaybeMessage<::keyvaluestore::requestKey>(Arena*);
template<> ::keyvaluestore::requestKeyValue* Arena::CreateMaybeMessage<::keyvaluestore::requestKeyValue>(Arena*);
template<> ::keyvaluestore::responseStatus* Arena::CreateMaybeMessage<::keyvaluestore::responseStatus>(Arena*);
template<> ::keyvaluestore::responseValue* Arena::CreateMaybeMessage<::keyvaluestore::responseValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace keyvaluestore {

enum statusValue : int {
  DEAULT = 0,
  UPDATED = 100,
  SUCCESS = 200,
  FAILURE = 400,
  statusValue_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  statusValue_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool statusValue_IsValid(int value);
constexpr statusValue statusValue_MIN = DEAULT;
constexpr statusValue statusValue_MAX = FAILURE;
constexpr int statusValue_ARRAYSIZE = statusValue_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* statusValue_descriptor();
template<typename T>
inline const std::string& statusValue_Name(T enum_t_value) {
  static_assert(::std::is_same<T, statusValue>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function statusValue_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    statusValue_descriptor(), enum_t_value);
}
inline bool statusValue_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, statusValue* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<statusValue>(
    statusValue_descriptor(), name, value);
}
// ===================================================================

class requestKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:keyvaluestore.requestKey) */ {
 public:
  inline requestKey() : requestKey(nullptr) {}
  ~requestKey() override;
  explicit constexpr requestKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  requestKey(const requestKey& from);
  requestKey(requestKey&& from) noexcept
    : requestKey() {
    *this = ::std::move(from);
  }

  inline requestKey& operator=(const requestKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline requestKey& operator=(requestKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const requestKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const requestKey* internal_default_instance() {
    return reinterpret_cast<const requestKey*>(
               &_requestKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(requestKey& a, requestKey& b) {
    a.Swap(&b);
  }
  inline void Swap(requestKey* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(requestKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline requestKey* New() const final {
    return new requestKey();
  }

  requestKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<requestKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const requestKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const requestKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "keyvaluestore.requestKey";
  }
  protected:
  explicit requestKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:keyvaluestore.requestKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_keyvaluestore_2eproto;
};
// -------------------------------------------------------------------

class responseValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:keyvaluestore.responseValue) */ {
 public:
  inline responseValue() : responseValue(nullptr) {}
  ~responseValue() override;
  explicit constexpr responseValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  responseValue(const responseValue& from);
  responseValue(responseValue&& from) noexcept
    : responseValue() {
    *this = ::std::move(from);
  }

  inline responseValue& operator=(const responseValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline responseValue& operator=(responseValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const responseValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const responseValue* internal_default_instance() {
    return reinterpret_cast<const responseValue*>(
               &_responseValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(responseValue& a, responseValue& b) {
    a.Swap(&b);
  }
  inline void Swap(responseValue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(responseValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline responseValue* New() const final {
    return new responseValue();
  }

  responseValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<responseValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const responseValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const responseValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(responseValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "keyvaluestore.responseValue";
  }
  protected:
  explicit responseValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .keyvaluestore.statusValue status = 1;
  void clear_status();
  ::keyvaluestore::statusValue status() const;
  void set_status(::keyvaluestore::statusValue value);
  private:
  ::keyvaluestore::statusValue _internal_status() const;
  void _internal_set_status(::keyvaluestore::statusValue value);
  public:

  // @@protoc_insertion_point(class_scope:keyvaluestore.responseValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_keyvaluestore_2eproto;
};
// -------------------------------------------------------------------

class requestKeyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:keyvaluestore.requestKeyValue) */ {
 public:
  inline requestKeyValue() : requestKeyValue(nullptr) {}
  ~requestKeyValue() override;
  explicit constexpr requestKeyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  requestKeyValue(const requestKeyValue& from);
  requestKeyValue(requestKeyValue&& from) noexcept
    : requestKeyValue() {
    *this = ::std::move(from);
  }

  inline requestKeyValue& operator=(const requestKeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline requestKeyValue& operator=(requestKeyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const requestKeyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const requestKeyValue* internal_default_instance() {
    return reinterpret_cast<const requestKeyValue*>(
               &_requestKeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(requestKeyValue& a, requestKeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(requestKeyValue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(requestKeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline requestKeyValue* New() const final {
    return new requestKeyValue();
  }

  requestKeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<requestKeyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const requestKeyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const requestKeyValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestKeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "keyvaluestore.requestKeyValue";
  }
  protected:
  explicit requestKeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:keyvaluestore.requestKeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_keyvaluestore_2eproto;
};
// -------------------------------------------------------------------

class responseStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:keyvaluestore.responseStatus) */ {
 public:
  inline responseStatus() : responseStatus(nullptr) {}
  ~responseStatus() override;
  explicit constexpr responseStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  responseStatus(const responseStatus& from);
  responseStatus(responseStatus&& from) noexcept
    : responseStatus() {
    *this = ::std::move(from);
  }

  inline responseStatus& operator=(const responseStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline responseStatus& operator=(responseStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const responseStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const responseStatus* internal_default_instance() {
    return reinterpret_cast<const responseStatus*>(
               &_responseStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(responseStatus& a, responseStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(responseStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(responseStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline responseStatus* New() const final {
    return new responseStatus();
  }

  responseStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<responseStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const responseStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const responseStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(responseStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "keyvaluestore.responseStatus";
  }
  protected:
  explicit responseStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .keyvaluestore.statusValue status = 1;
  void clear_status();
  ::keyvaluestore::statusValue status() const;
  void set_status(::keyvaluestore::statusValue value);
  private:
  ::keyvaluestore::statusValue _internal_status() const;
  void _internal_set_status(::keyvaluestore::statusValue value);
  public:

  // @@protoc_insertion_point(class_scope:keyvaluestore.responseStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_keyvaluestore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// requestKey

// string key = 1;
inline void requestKey::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& requestKey::key() const {
  // @@protoc_insertion_point(field_get:keyvaluestore.requestKey.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void requestKey::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:keyvaluestore.requestKey.key)
}
inline std::string* requestKey::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:keyvaluestore.requestKey.key)
  return _s;
}
inline const std::string& requestKey::_internal_key() const {
  return key_.Get();
}
inline void requestKey::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* requestKey::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* requestKey::release_key() {
  // @@protoc_insertion_point(field_release:keyvaluestore.requestKey.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void requestKey::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:keyvaluestore.requestKey.key)
}

// -------------------------------------------------------------------

// responseValue

// .keyvaluestore.statusValue status = 1;
inline void responseValue::clear_status() {
  status_ = 0;
}
inline ::keyvaluestore::statusValue responseValue::_internal_status() const {
  return static_cast< ::keyvaluestore::statusValue >(status_);
}
inline ::keyvaluestore::statusValue responseValue::status() const {
  // @@protoc_insertion_point(field_get:keyvaluestore.responseValue.status)
  return _internal_status();
}
inline void responseValue::_internal_set_status(::keyvaluestore::statusValue value) {
  
  status_ = value;
}
inline void responseValue::set_status(::keyvaluestore::statusValue value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:keyvaluestore.responseValue.status)
}

// string value = 2;
inline void responseValue::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& responseValue::value() const {
  // @@protoc_insertion_point(field_get:keyvaluestore.responseValue.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void responseValue::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:keyvaluestore.responseValue.value)
}
inline std::string* responseValue::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:keyvaluestore.responseValue.value)
  return _s;
}
inline const std::string& responseValue::_internal_value() const {
  return value_.Get();
}
inline void responseValue::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* responseValue::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* responseValue::release_value() {
  // @@protoc_insertion_point(field_release:keyvaluestore.responseValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void responseValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:keyvaluestore.responseValue.value)
}

// -------------------------------------------------------------------

// requestKeyValue

// string key = 1;
inline void requestKeyValue::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& requestKeyValue::key() const {
  // @@protoc_insertion_point(field_get:keyvaluestore.requestKeyValue.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void requestKeyValue::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:keyvaluestore.requestKeyValue.key)
}
inline std::string* requestKeyValue::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:keyvaluestore.requestKeyValue.key)
  return _s;
}
inline const std::string& requestKeyValue::_internal_key() const {
  return key_.Get();
}
inline void requestKeyValue::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* requestKeyValue::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* requestKeyValue::release_key() {
  // @@protoc_insertion_point(field_release:keyvaluestore.requestKeyValue.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void requestKeyValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:keyvaluestore.requestKeyValue.key)
}

// string value = 2;
inline void requestKeyValue::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& requestKeyValue::value() const {
  // @@protoc_insertion_point(field_get:keyvaluestore.requestKeyValue.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void requestKeyValue::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:keyvaluestore.requestKeyValue.value)
}
inline std::string* requestKeyValue::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:keyvaluestore.requestKeyValue.value)
  return _s;
}
inline const std::string& requestKeyValue::_internal_value() const {
  return value_.Get();
}
inline void requestKeyValue::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* requestKeyValue::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* requestKeyValue::release_value() {
  // @@protoc_insertion_point(field_release:keyvaluestore.requestKeyValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void requestKeyValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:keyvaluestore.requestKeyValue.value)
}

// -------------------------------------------------------------------

// responseStatus

// .keyvaluestore.statusValue status = 1;
inline void responseStatus::clear_status() {
  status_ = 0;
}
inline ::keyvaluestore::statusValue responseStatus::_internal_status() const {
  return static_cast< ::keyvaluestore::statusValue >(status_);
}
inline ::keyvaluestore::statusValue responseStatus::status() const {
  // @@protoc_insertion_point(field_get:keyvaluestore.responseStatus.status)
  return _internal_status();
}
inline void responseStatus::_internal_set_status(::keyvaluestore::statusValue value) {
  
  status_ = value;
}
inline void responseStatus::set_status(::keyvaluestore::statusValue value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:keyvaluestore.responseStatus.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace keyvaluestore

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::keyvaluestore::statusValue> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::keyvaluestore::statusValue>() {
  return ::keyvaluestore::statusValue_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_keyvaluestore_2eproto
